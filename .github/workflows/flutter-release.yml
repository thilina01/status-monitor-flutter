name: Build & Deploy Flutter App to Play Store

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Select release type: major, minor, or patch'
        required: true
        default: patch

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for Workload Identity Federation
      contents: write  # Required to push commits back to the repository

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Authenticate to Google Cloud
      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "projects/736544885079/locations/global/workloadIdentityPools/github-actions-pool/providers/github"
          service_account: "github-deploy@open-212202.iam.gserviceaccount.com"

      # Install Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          cache: true

      # Decode and Save Keystore
      - name: Decode and Save Keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks

      # Setup Keystore in Gradle
      - name: Configure Keystore
        run: |
          cat <<EOF > android/key.properties
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=upload-keystore.jks
          EOF

      # Update version in pubspec.yaml based on the selected release type
      - name: Set Dynamic Version in pubspec.yaml
        run: |
          # Extract the current version from pubspec.yaml (assumes "version: X.Y.Z+build")
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          echo "Current version: $CURRENT_VERSION"
          
          # Extract version numbers from format X.Y.Z+build (ignoring build)
          VERSION_NUM=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
          echo "Parsed version - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
          
          # Get release type from the workflow input
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          echo "Release type: $RELEASE_TYPE"
          
          if [ "$RELEASE_TYPE" = "major" ]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif [ "$RELEASE_TYPE" = "minor" ]; then
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          else
            # Default to patch release
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          # Calculate new version code (for example, MAJOR*10000 + MINOR*100 + PATCH)
          NEW_VERSION_CODE=$((NEW_MAJOR * 10000 + NEW_MINOR * 100 + NEW_PATCH))
          
          echo "Updating version to: ${NEW_VERSION}+${NEW_VERSION_CODE}"
          sed -i "s/^version:.*/version: ${NEW_VERSION}+${NEW_VERSION_CODE}/" pubspec.yaml
          
          # Export new version variables for later steps
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "NEW_VERSION_CODE=${NEW_VERSION_CODE}" >> $GITHUB_ENV
          
          cat pubspec.yaml

      # Commit the updated version back to the repository so future builds use it
      - name: Commit version bump
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add pubspec.yaml
          # Include [skip ci] in the commit message to avoid triggering other workflows on push
          git commit -m "Bump version to ${NEW_VERSION}+${NEW_VERSION_CODE} [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref }}

      # Install Dependencies
      - name: Get Flutter Dependencies
        run: flutter pub get

      # Run Flutter Tests (Optional)
      - name: Run Tests
        run: flutter test

      # Build the App (AAB Format)
      - name: Build Android App Bundle
        run: flutter build appbundle

      - name: Verify Build Output
        run: ls -R build/app/outputs/bundle/release/

      # Upload to Google Play
      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
          packageName: com.slconsultech.statusmonitorapp
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
          status: draft

      # Clean Up Sensitive Files
      - name: Clean Up
        run: rm -f android/app/upload-keystore.jks

# Secrets Required:
# ANDROID_KEYSTORE_BASE64	The base64 encoded keystore file (upload-keystore.jks).
# ANDROID_KEYSTORE_PASSWORD	The password for the keystore.
# ANDROID_KEY_ALIAS	The key alias name.
# ANDROID_KEY_PASSWORD	The password for the key alias.
# GOOGLE_PLAY_KEY_JSON	The base64 encoded content of google_play_key.json. [ Optional ]

# To encode the keystore file, run the following command:
# base64 upload-keystore.jks | pbcopy # macOS
# base64 upload-keystore.jks | clip   # Windows
# base64 -w 0 upload-keystore.jks > keystore.b64 # Linux

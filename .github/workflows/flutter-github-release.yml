name: Build & Create GitHub Release

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  build_release:
    name: Build App and Create Release
    runs-on: ubuntu-latest
    env:
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
    permissions:
      contents: write  # Required to push tags and create releases

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Install Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          cache: true

      # Decode and Save Keystore (if signing is required)
      - name: Decode and Save Keystore
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks

      # Setup Keystore in Gradle (if signing is required)
      - name: Configure Keystore
        if: env.ANDROID_KEYSTORE_PASSWORD != ''
        run: |
          cat <<EOF > android/key.properties
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyPassword=$ANDROID_KEY_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          storeFile=upload-keystore.jks
          EOF

      # Install Dependencies
      - name: Get Flutter Dependencies
        run: flutter pub get

      # Run Flutter Tests (Optional)
      - name: Run Tests
        run: flutter test

      # Build the Android App Bundle (AAB)
      - name: Build Android App Bundle
        run: flutter build appbundle --release

      - name: Verify AAB Build Output
        run: ls -R build/app/outputs/bundle/release/

      # Build the Android APK
      - name: Build Android APK
        run: flutter build apk --release

      - name: Verify APK Build Output
        run: ls -R build/app/outputs/flutter-apk/

      # Create a Git Tag based on the version in pubspec.yaml and a timestamp for uniqueness
      - name: Create Tag
        id: create_tag
        run: |
          # Extract the current version from pubspec.yaml (assumes "version: X.Y.Z+build")
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          # Use the part before the '+' as the base version
          BASE_VERSION="${VERSION%%+*}"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TAG="v${BASE_VERSION}-${TIMESTAMP}"
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "Creating tag: ${TAG}"
          git tag ${TAG}
          git push origin ${TAG}

      # Create a GitHub Release and attach both the AAB and APK files as assets
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          body: "Automated release for commit ${{ github.sha }}."
          files: |
            build/app/outputs/bundle/release/app-release.aab
            build/app/outputs/flutter-apk/app-release.apk

      # Clean Up Sensitive Files
      - name: Clean Up
        run: rm -f android/app/upload-keystore.jks
